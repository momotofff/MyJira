### Объяснение структуры:

- **Сервера**: Указывает базовый URL, где размещается API.
- **Paths**: Определяет разные конечные точки (endpoints) для работы с задачами.
- `GET /tasks`: Получить все задачи.
- `POST /tasks`: Создать новую задачу.
- `GET /tasks/{taskId}`: Получить задачу по ID.
- `PUT /tasks/{taskId}`: Обновить задачу по ID.
- `DELETE /tasks/{taskId}`: Удалить задачу по ID.

- **Components**:
- **Schemas**: Определяет схемы для задачи и запросов на создание и обновление задач.

### Реализация

Эта спецификация может быть использована с YAML-совместимыми инструментами для генерации серверной части API или документирования.

Чтобы запустить пользовательский интерфейс Swagger, можно использовать такие инструменты, как Swagger UI,
в том числе встроенные решения для Express.js (если вы разрабатываете сервер на Node.js).
Подключив соответствующие библиотеки, вы можете реализацию REST API, используя запросы, описанные в этой спецификации.

### 1. Запрос на создание пользователя (Create User)

**HTTP Метод:** `POST`
**URL:** `/users`
**Заголовки:**
- `Content-Type: application/json`

**Тело запроса:**
json
{
    "username": "новый_пользователь",
    "role": "editor",  // Роли: admin, editor, viewer
    "email": "user@example.com"
}


**Ожидаемый ответ:**

**HTTP Код:** `201 Created`
**Тело ответа:**
json
{
    "id": "1", // Идентификатор пользователя, созданный в системе
    "username": "новый_пользователь",
    "role": "editor",
    "email": "user@example.com"
}


### 2. Запрос на редактирование пользователя (Update User)

**HTTP Метод:** `PUT`
**URL:** `/users/{userId}` (замените `{userId}` на фактический идентификатор пользователя)
**Заголовки:**
- `Content-Type: application/json`

**Тело запроса:**
json
{
    "username": "обновленный_пользователь",
    "role": "admin", // Роли: admin, editor, viewer
    "email": "updated_user@example.com"
}


**Ожидаемый ответ:**

**HTTP Код:** `200 OK`
**Тело ответа:**
json
{
    "id": "1", // Идентификатор пользователя, обновленный в системе
    "username": "обновленный_пользователь",
    "role": "admin",
    "email": "updated_user@example.com"
}


### Примечание:

1. **Аутентификация**: Оба запроса должны отправляться от авторизованного пользователя с соответствующими правами
на создание или редактирование пользователей. Для этого необходимо предоставить токен в заголовке авторизации
(например, `Authorization: Bearer <token>`).

2. **Обработка ошибок**:
- Если пользователь с указанным `userId` не существует для редактирования, сервер должен
вернуть HTTP Код `404 Not Found` с соответствующим сообщением.
- При создании пользователя, если поля запроса не проходят валидацию (например, если email уже существует),
сервер должен вернуть HTTP Код `400 Bad Request` с сообщением об ошибке.

3. **Настройка прав доступа**: В зависимости от роли пользователя, следует реализовать соответствующий контроль
доступа на сервере, чтобы только пользователи с ролью `admin` могли создавать или редактировать другие учетные
записи пользователей.



ChatGPT (15:59:40): Для взаимодействия с базой данных PostgreSQL в Java, развернутой в Docker-контейнере, вы можете использовать библиотеку JDBC (Java Database Connectivity). Ниже представлены шаги, которые помогут вам настроить подключение к базе данных и выполнить операции добавления новых пользователей (User) и задач (Task).

### 1. Настройка Docker с PostgreSQL

1. Убедитесь, что у вас установлен Docker, и создайте контейнер PostgreSQL, как описано ранее:

bash
docker run --name pg_container -e POSTGRES_USER=youruser -e POSTGRES_PASSWORD=yourpassword -e POSTGRES_DB=yourdbname -p 5432:5432 -d postgres


### 2. Добавление зависимости в проект

Если вы используете Maven, добавьте зависимость PostgreSQL в ваш `pom.xml`:

xml
<dependencies>
    <dependency>
        <groupId>org.postgresql</groupId>
        <artifactId>postgresql</artifactId>
        <version>42.5.0</version> <!-- Используйте наиболее актуальную версию -->
    </dependency>
</dependencies>


Если вы не используете Maven, скачайте соответствующий JAR-файл и добавьте его в ваш проект.

### 3. Создание класса для обработки соединения с базой данных

Создайте класс для подключения к базе данных и выполнения SQL-запросов:

java
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class DatabaseManager {
    private static final String URL = "jdbc:postgresql://localhost:5432/yourdbname";
    private static final String USER = "youruser";
    private static final String PASSWORD = "yourpassword";

    public Connection getConnection() throws SQLException {
        return DriverManager.getConnection(URL, USER, PASSWORD);
    }

    public void createUser(String username, String role, String email) {
        String sql = "INSERT INTO users (username, role, email) VALUES (?, ?, ?)";
        try (Connection conn = getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, username);
            pstmt.setString(2, role);
            pstmt.setString(3, email);
            pstmt.executeUpdate();
            System.out.println("User created successfully!");
        } catch (SQLException e) {
            System.err.println("Error creating user: " + e.getMessage());
        }
    }

    public void createTask(String title, String description, String status, String priority, String author, String assignee) {
        String sql = "INSERT INTO tasks (title, description, status, priority, author, assignee) VALUES (?, ?, ?, ?, ?, ?)";
        try (Connection conn = getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, title);
            pstmt.setString(2, description);
            pstmt.setString(3, status);
            pstmt.setString(4, priority);
            pstmt.setString(5, author);
            pstmt.setString(6, assignee);
            pstmt.executeUpdate();
            System.out.println("Task created successfully!");
        } catch (SQLException e) {
            System.err.println("Error creating task: " + e.getMessage());
        }
    }
}


### 4. Пример использования

Теперь вы можете использовать этот класс для создания пользователей и задач:

java
public class Main {
    public static void main(String[] args) {
        DatabaseManager dbManager = new DatabaseManager();

        // Создание нового пользователя
        dbManager.createUser("новый_пользователь", "editor", "user@example.com");

        // Создание новой задачи
        dbManager.createTask("Задача 1", "Описание задачи 1", "pending", "high", "Автор", "Исполнитель");
    }
}


### 5. Настройка таблиц в PostgreSQL

Перед запуском приложения убедитесь, что таблицы `users` и `tasks` существуют в базе данных. Вы можете создать их с помощью SQL-запросов, выполненных в вашей базе данных PostgreSQL:

sql
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    role VARCHAR(20) CHECK (role IN ('admin', 'editor', 'viewer')),
    email VARCHAR(100) NOT NULL UNIQUE
);

CREATE TABLE tasks (
    id SERIAL PRIMARY KEY,
    title VARCHAR(100) NOT NULL,
    description TEXT,
    status VARCHAR(20) CHECK (status IN ('pending', 'in_progress', 'completed')),
    priority VARCHAR(20) CHECK (priority IN ('high', 'medium', 'low')),
    author VARCHAR(50),
    assignee VARCHAR(50)
);


### Замечания

1. **Аутентификация**: Убедитесь, что ваши данные для доступа к базе данных (имя пользователя, пароль и название базы данных) прописаны правильно.

2. **Обработка ошибок**: В приведенной выше реализации базовая обработка ошибок осуществляется с помощью `SQLException`. Вы можете настроить более детальное логирование ошибок, если это необходимо.

3. **Docker Networking**: Если ваше Java приложение запущено в другом Docker-контейнере, измените `localhost` на имя контейнера PostgreSQL в строке соединения.

Теперь у вас есть полноценный пример взаимодействия вашего Java приложения с PostgreSQL, развернутой в Docker-контейнере, для создания пользователей и задач.