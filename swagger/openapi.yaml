openapi: 3.0.0
info:
  title: Task management system
  description: This is a sample Task management system based on the OpenAPI 3.0 specification.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1

servers:
  - url: http://localhost:9000/api/v1
    description: Dev server

paths:
  /tasks:
    get:
      summary: "Method for getting a list of tasks"
      description: "The method is intended to obtain a list of all tasks saved in the database."
      tags:
        - Task
      operationId: getAllTasks
      responses:
        '200':
          description: "List of tasks"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        default:
          description: 'Successful operation'
        '501':
          description: 'Method not implemented in code'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: "Task creation method"
      tags:
        - Task
      operationId: createTask
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
      responses:
        '201':
          description: 'Successful task creation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        default:
          description: "Successful operation"

  /tasks/{taskId}:
    get:
      operationId: getTaskById
      summary: "Get task by ID"
      tags:
        - Task
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: 'Task not found'
        default:
          description: 'Successful operation'

    put:
      operationId: updateTaskById
      summary: "Update task"
      tags:
        - Task
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskRequest'
      responses:
        '200':
          description: 'Update task'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        default:
          description: 'Successful operation'
        '404':
          description: 'Task not found'

    delete:
      operationId: deleteTaskById
      summary: "Task deleted"
      tags:
        - Task
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: "Task deleted"
        default:
          description: "Successful operation"
        '404':
          description: "Task not found"

  /users:
    get:
      operationId: getAllUsers
      summary: "Get list of users"
      tags:
        - User
      responses:
        '200':
          description: list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: 'Bad request'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

        default:
          description: "successful operation"

    post:
      operationId: postUser
      summary: "Create user"
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: Пользователь создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: "successful operation"

  /users/{username}:
    get:
      operationId: getUserByName
      summary: "Get user by name"
      tags:
        - User
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "User found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: "User not found"
        default:
          description: "successful operation"

    put:
      operationId: updateUserByName
      summary: "Update user"
      tags:
        - User
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: "User updated"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: "successful operation"
        '404':
          description: "User not found"

    delete:
      operationId: deleteUserByName
      summary: "Deleted User"
      tags:
        - User
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: "User deleted"
        default:
          description: "successful operation"
        '404':
          description: "User not found"

components:
  schemas:
    Task:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: "Задача 1"
        description:
          type: string
          example: "Описание задачи 1"
        status:
          type: string
          enum: [pending, in_progress, completed]
          example: "pending"
        priority:
          type: string
          enum: [high, medium, low]
          example: "high"
        author:
          type: string
          example: "Автор Задачи"
        assignee:
          type: string
          example: "Исполнитель Задачи"

    CreateTaskRequest:
      type: object
      required:
        - title
        - description
        - status
        - priority
        - author
        - assignee
      properties:
        title:
          type: string
          example: "Новая задача"
        description:
          type: string
          example: "Описание новой задачи"
        status:
          type: string
          enum: [pending, in_progress, completed]
          example: "pending"
        priority:
          type: string
          enum: [high, medium, low]
          example: "medium"
        author:
          type: string
          example: "Автор"
        assignee:
          type: string
          example: "Исполнитель"

    UpdateTaskRequest:
      type: object
      properties:
        title:
          type: string
          example: "Обновленное название задачи"
        description:
          type: string
          example: "Обновленное описание задачи"
        status:
          type: string
          enum: [pending, in_progress, completed]
          example: "in_progress"
        priority:
          type: string
          enum: [high, medium, low]
          example: "low"
        author:
          type: string
          example: "Обновленный автор"
        assignee:
          type: string
          example: "Обновленный исполнитель"

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          example: "username"
        role:
          type: string
          enum: [Admin, User, Viewer]
          example: "User"
        email:
          type: string
          example: "user@example.com"

    CreateUserRequest:
      type: object
      required:
        - username
        - role
        - email
      properties:
        username:
          type: string
          example: "username"
        role:
          type: string
          enum: [admin, editor, viewer]
          example: "editor"
        email:
          type: string
          example: "user@example.com"

    UpdateUserRequest:
      type: object
      properties:
        username:
          type: string
          example: "Updated name"
        role:
          type: string
          example: "Updated role"
        email:
          type: string
          example: "Updated email"

    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
